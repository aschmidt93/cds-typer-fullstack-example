/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/no-redundant-type-constituents */
import {
  ActionEventHandler,
  ApplicationService,
  CdsFunction,
  Service,
  connect as _connect,
  services as _services,
} from "@sap/cds";

import type * as BooksServiceTypes from "../@cds-models/BooksService";

import type BooksServiceHandler from "./books-service";

// We overwrite the `cds.services` and `cds.connect` definition, such that we have type safety
// when interacting with services
declare module "@sap/cds" {
  export const services: ServiceMapping = _services;
  export const connect: TypedConnect = _connect;

  /**
   * Event Handler for an action/function of a service
   */
  export type ActionFunctionHandler<T extends CdsFunction> = ActionEventHandler<
    T["__parameters"],
    T["__returns"]
  >;

  /**
   * The handler for a service. Here we make sure, that all functions/actions are implemented.
   * We require that an action/function is implemented as a class method whose name starts with `on`.
   */
  export type ServiceHandler<T extends ServiceDefinition> = {
    [key in keyof T as T[key] extends ActionFunctionDef
      ? key extends string
        ? `on${Capitalize<key>}`
        : never
      : never]: T[key] extends ActionFunctionDef ? ActionFunctionHandler<T[key]> : never;
  };

  /**
   * The definition of a service as generated by cds-typer
   */
  export type ServiceDefinition = { [key: string]: ActionFunctionDef | unknown };

  /**
   * The definition of an action/function as generated by cds-typer
   */
  type ActionFunctionDef = { __returns: any; __parameters: any; (...args: any): any };

  /**
   * All functions/actions of a service
   */
  export type ServiceActionsFunctions<T extends ServiceDefinition> = {
    [key in keyof T as T[key] extends ActionFunctionDef
      ? key
      : never]: T[key] extends ActionFunctionDef ? T[key] : never;
  };

  /**
   * Parameter of an action/function.
   * Handles also the case when no parameter is required.
   */
  type ActionFunctionParam<F extends ActionFunctionDef> = F["__parameters"] extends Record<
    string,
    never
  >
    ? undefined
    : F["__parameters"];

  /**
   * Return type of an action/function
   */
  type ActionFunctionReturn<F extends ActionFunctionDef> = F["__returns"];

  /**
   * A service whose `send` method is fully typed.
   */
  interface TypedService<T extends ServiceDefinition> extends Service {
    send: {
      <E extends keyof ServiceActionsFunctions<T>>(
        event: E,
        ...data: ActionFunctionParam<ServiceActionsFunctions<T>[E]> extends undefined
          ? []
          : [ActionFunctionParam<ServiceActionsFunctions<T>[E]>]
      ): Promise<ActionFunctionReturn<ServiceActionsFunctions<T>[E]>>;
    } & Service["send"];
  }

  /**
   * Utility type for removing index signature from a type
   */
  type RemoveIndex<T> = {
    [K in keyof T as string extends K
      ? never
      : number extends K
      ? never
      : symbol extends K
      ? never
      : K]: T[K];
  };

  /**
   * A typed version of `cds.connect` returning typed services
   */
  type TypedConnect = {
    to<S extends keyof RemoveIndex<ServiceMapping>>(service: S): Promise<ServiceMapping[S]>;
    <S extends keyof RemoveIndex<ServiceMapping>>(service: S): Promise<ServiceMapping[S]>;
  };

  /**
   * A typed version of `cds.services`
   */
  type ServiceMapping = {
    BooksService: TypedService<typeof BooksServiceTypes>;
    [name: string]: ApplicationService;
  };
}
